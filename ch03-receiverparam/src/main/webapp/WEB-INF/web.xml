<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--    声明,注册springmvc的核心对象DispatcherServlet
         首次被请求时,这个对象才会被创建,但是我们需要tomcat启动时,就创建DispatcherServlet对象的实例,
         这样才能读取配置文件,把这个配置文件中的对象都创建好,当用户发起请求时就可以直接使用对象了.
-->
    <servlet>
<!--       service-ref-name 名称自定义-->
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>


<!--        自定义springmvc读取配置文件的位置   如果我们没有指定配置文件的位置，springmvc会默认到
            WEB-INF路径去找配置文件，而且它会根据 <servlet-name>的值 + "-servlet.xml"（在本例中，
            springmvc会默认 配置文件名为springmvc-servlet.xml）的名称去找。
   -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
<!--            classpath：是指resources目录下的-->
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>


<!--      我们希望在tomcat启动后，就创建servlet对象
        作用：
             1)load-on-startup元素标记容器是否在tomcat启动的时候就加载这个servlet(实例化并调用其init()方法)
             2)它的值必须是一个整数，表示servlet应该被载入的顺序
             3)当值为0或者大于0时，表示容器在应用启动时就加载并初始化这个servlet；
             4)当值小于0或者没有指定时，则表示容器在该servlet被请求时才会去加载。
             5)正数的值越小，该servlet的优先级越高，应用启动时就越先加载。
             6)当值相同时，容器就会自己选择顺序来加载。
-->
        <load-on-startup>1</load-on-startup>
    </servlet>


    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
<!--        使用框架时，url-pattern可以使用两种值
                1.使用扩展名方式，语法： *.xxx,  xxx是自定义扩展名。常用的方式 *.do *.action  *.mvc等等
                      如果url为http://localhost:8080/myweb/some.do    则.do结尾的请求都交给名叫springmvc这个servlet来处理
                2.使用斜杠 “ / ”
-->
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>

<!--   注册声明过滤器  解决post请求乱码问题-->
    <filter>
<!--        filter-name是自定义的-->
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
<!--      设置项目中使用的字符编码 -->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
<!--        强制请求对象（HttpServletRequest ）使用encoding 编码的值-->
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
<!--     强制设置应答对象（HttpServletResponse）使用encoding的编码的值   -->
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
<!--        /*  表示强制所有的请求先通过过滤器处理-->
        <url-pattern>/*</url-pattern>
    </filter-mapping>
</web-app>